section#query-chainer
  p Because you will want to save several items at once and just go on after all of them are saved, Sequelize provides a handy helper for that:
  pre.prettyprint.linenums
    | var chainer = new Sequelize.Utils.QueryChainer
    | chainer.add(/* Query | EventEmitter */)
    | chainer.run().success(function(){}).error(function(errors){})

  p And a real example:
  pre.prettyprint.linenums
    | var chainer = new Sequelize.Utils.QueryChainer
    | var Task = sequelize.define('Task', /* ... */)
    | &nbsp;
    | chainer
    |   .add(Task.drop())
    |   .add(Task.sync())
    | &nbsp;
    | for(var i = 0; i < 20; i++)
    |   chainer.add(Task.create({}))
    | &nbsp;
    | chainer
    |   .run()
    |   .success(function(){})
    |   .error(function(errors){})

  p It is also possible to force a serial run of the query chainer by using the following syntax:
  pre.prettyprint.linenums
    | new Sequelize.Utils.QueryChainer()
    |   .add(Model, 'function', [param1, param2])
    |   .add(Model, 'function2', [param1, param2])
    |   .runSerially()
    |   .success(function() { /* no problems :) */ })
    |   .error(function(err) { /* hmm not good :> */ })
    | &nbsp;
    | // and with options:
    | &nbsp;
    | new Sequelize.Utils.QueryChainer()
    |   .add(Model, 'function', [param1, param2], {
    |     // Will be executed before Model#function is called
    |     before: function(model) {},
    | &nbsp;
    |     /*
    |       Will be executed after Model#function was called
    |       and the function emitted a success or error event.
    |       If the following success option is passed, the function
    |       will be executed after the success function.
    |     */
    |     after: function(migration) {},
    | &nbsp;
    |     // Will be executed if Model#function emits a success event.
    |     success: function(migration, callback) {}
    |   })
    |   // skipOnError: don't execute functions once one has emitted an failure event.
    |   .runSerially({ skipOnError: true })
    |   .success(function() { /* no problems :) */ })
    |   .error(function(err) { /* hmm not good :> */ })

  p.v1-5-0
    | If the success callbacks of the added methods are passing values,
    | they can be utilized in the actual <code>success</code> method of
    | the query chainer:

  pre.prettyprint.linenums
    | chainer.add(Project.getTasks())
    | chainer.add(Project.getTeam())
    | chainer.run().success(function(results){
    |   var tasks = results[0]
    |   var team = results[1]
    | })

